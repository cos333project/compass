# Generated by Django 4.2.6 on 2023-10-30 13:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('student', 'Student')], default='student', max_length=25)),
                ('class_year', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'db_table': 'CustomUser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_code', models.CharField(max_length=10, unique=True)),
                ('suffix', models.CharField(max_length=10)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
            ],
            options={
                'db_table': 'AcademicTerm',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.CharField(max_length=50, null=True)),
                ('course_id', models.CharField(max_length=10, null=True)),
                ('catalog_number', models.CharField(max_length=10, null=True)),
                ('title', models.CharField(max_length=150, null=True)),
                ('description', models.TextField(null=True)),
                ('drop_consent', models.CharField(blank=True, max_length=1, null=True)),
                ('add_consent', models.CharField(blank=True, max_length=1, null=True)),
                ('web_address', models.URLField(blank=True, max_length=255, null=True)),
                ('pu_flag', models.CharField(blank=True, max_length=1, null=True)),
                ('transcript_title', models.CharField(blank=True, max_length=150, null=True)),
                ('long_title', models.CharField(blank=True, max_length=250, null=True)),
                ('distribution_area_long', models.CharField(blank=True, max_length=150, null=True)),
                ('distribution_area_short', models.CharField(blank=True, max_length=10, null=True)),
                ('reading_writing_assignment', models.TextField(blank=True, null=True)),
                ('grading_basis', models.CharField(blank=True, max_length=5, null=True)),
                ('reading_list', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Course',
            },
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=10, null=True)),
                ('code', models.CharField(max_length=10, null=True)),
                ('description', models.TextField(null=True)),
                ('urls', models.CharField(max_length=250, null=True)),
            ],
            options={
                'db_table': 'Degree',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=4, null=True, unique=True)),
                ('name', models.CharField(max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'Department',
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emplid', models.CharField(max_length=50, null=True, unique=True)),
                ('first_name', models.CharField(max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100, null=True)),
                ('full_name', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'Instructor',
            },
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, null=True)),
                ('code', models.CharField(max_length=10, null=True)),
                ('description', models.TextField(null=True)),
                ('urls', models.CharField(max_length=250, null=True)),
                ('degree', models.ManyToManyField(to='compass.degree')),
            ],
            options={
                'db_table': 'Major',
            },
        ),
        migrations.CreateModel(
            name='UserCourses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.IntegerField(choices=[(1, 'freshman fall'), (2, 'freshman spring'), (3, 'sophomore fall'), (4, 'sophomore spring'), (5, 'junior fall'), (6, 'junior spring'), (7, 'senior fall'), (8, 'senior spring')], null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in-progress', 'In Progress'), ('completed', 'Completed')], default='planned', max_length=20)),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='compass.course')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'UserCourses',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track', models.CharField(max_length=5, null=True)),
                ('seat_reservations', models.CharField(max_length=1)),
                ('class_number', models.IntegerField(null=True, unique=True)),
                ('capacity', models.IntegerField(null=True)),
                ('enrollment', models.IntegerField(default=0)),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='compass.course')),
                ('instructor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='compass.instructor')),
                ('term', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='compass.academicterm')),
            ],
            options={
                'db_table': 'Section',
            },
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, null=True)),
                ('max_counted', models.IntegerField(default=1)),
                ('min_needed', models.IntegerField(default=1)),
                ('explanation', models.TextField(null=True)),
                ('double_counting_allowed', models.BooleanField()),
                ('max_common_with_major', models.IntegerField(default=0)),
                ('pdfs_allowed', models.IntegerField(default=0)),
                ('min_grade', models.FloatField(default=0.0)),
                ('completed_by_semester', models.IntegerField(default=8)),
                ('dist_req', models.CharField(max_length=5, null=True)),
                ('num_courses', models.IntegerField(null=True)),
                ('course_list', models.ManyToManyField(related_name='satisfied_by', to='compass.course')),
                ('excluded_course_list', models.ManyToManyField(related_name='not_satisfied_by', to='compass.course')),
                ('req_list', models.ManyToManyField(to='compass.requirement')),
            ],
            options={
                'db_table': 'Requirement',
            },
        ),
        migrations.CreateModel(
            name='Minor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, null=True)),
                ('code', models.CharField(max_length=10, null=True)),
                ('description', models.TextField(null=True)),
                ('urls', models.CharField(max_length=250, null=True)),
                ('apply_by_semester', models.IntegerField(default=8)),
                ('excluded_majors', models.ManyToManyField(to='compass.major')),
                ('excluded_minors', models.ManyToManyField(to='compass.minor')),
                ('req_list', models.ManyToManyField(to='compass.requirement')),
            ],
            options={
                'db_table': 'Minor',
            },
        ),
        migrations.AddField(
            model_name='major',
            name='req_list',
            field=models.ManyToManyField(to='compass.requirement'),
        ),
        migrations.AddField(
            model_name='degree',
            name='req_list',
            field=models.ManyToManyField(to='compass.requirement'),
        ),
        migrations.CreateModel(
            name='CourseEquivalent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equivalence_type', models.CharField(choices=[('CROSS_LIST', 'Cross-Listing'), ('REQUIREMENT', 'Requirement Fulfillment')], default='REQUIREMENT', max_length=12)),
                ('equivalent_course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='equivalents', to='compass.course')),
                ('primary_course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_equivalents', to='compass.course')),
            ],
            options={
                'db_table': 'CourseEquivalent',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='compass.department'),
        ),
        migrations.CreateModel(
            name='ClassYearEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_year', models.IntegerField(null=True)),
                ('enrl_seats', models.IntegerField(null=True)),
                ('section', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='compass.section')),
            ],
            options={
                'db_table': 'ClassYearEnrollment',
            },
        ),
        migrations.CreateModel(
            name='ClassMeeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_number', models.PositiveIntegerField(null=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('room', models.CharField(max_length=50, null=True)),
                ('days', models.CharField(max_length=20, null=True)),
                ('building_name', models.CharField(max_length=255, null=True)),
                ('section', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='compass.section')),
            ],
            options={
                'db_table': 'ClassMeeting',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, null=True)),
                ('code', models.CharField(max_length=10, null=True)),
                ('description', models.TextField(null=True)),
                ('urls', models.CharField(max_length=250, null=True)),
                ('apply_by_semester', models.IntegerField(default=8)),
                ('active_until', models.DateField(blank=True, null=True)),
                ('excluded_majors', models.ManyToManyField(to='compass.major')),
                ('req_list', models.ManyToManyField(to='compass.requirement')),
            ],
            options={
                'db_table': 'Certificate',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='major',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='compass.major'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='minors',
            field=models.ManyToManyField(to='compass.minor'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
